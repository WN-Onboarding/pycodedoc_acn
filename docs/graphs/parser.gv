digraph G {
concentrate=true;
splines="ortho";
rankdir="LR";
subgraph legend{
    rank = min;
    label = "legend";
    Legend [shape=none, margin=0, label = <
        <table cellspacing="0" cellpadding="0" border="1"><tr><td>Code2flow Legend</td></tr><tr><td>
        <table cellspacing="0">
        <tr><td>Regular function</td><td width="50px" bgcolor='#cccccc'></td></tr>
        <tr><td>Trunk function (nothing calls this)</td><td bgcolor='#966F33'></td></tr>
        <tr><td>Leaf function (this calls nothing else)</td><td bgcolor='#6db33f'></td></tr>
        <tr><td>Function call</td><td><font color='black'>&#8594;</font></td></tr>
        </table></td></tr></table>
        >];
}node_bc28c28c [label="326: get_tree()" name="parser::Parser.get_tree" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_499d168b [label="126: get_module()" name="parser::Parser.get_module" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_f9f0388e [label="272: parse_module_structure()" name="parser::Parser.parse_module_structure" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_b6ccfbd6 [label="299: _get_matching_paths()" name="parser::Parser._get_matching_paths" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_d47f8482 [label="454: _add_nodes_attrs()" name="parser::Parser._add_nodes_attrs" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_d6716af4 [label="351: get_module_deps()" name="parser::Parser.get_module_deps" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_84e87eb0 [label="248: parse_function_structure()" name="parser::Parser.parse_function_structure" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_c69a4d0d [label="100: parse_module()" name="parser::Parser.parse_module" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_56465d25 [label="210: write_graphs()" name="parser::Parser.write_graphs" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_a7969c5e [label="433: get_related_entities()" name="parser::Parser.get_related_entities" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_e1123935 [label="285: get_modules_paths()" name="parser::Parser.get_modules_paths" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_fe10930d [label="307: _not_match()" name="parser::Parser._not_match" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_6fb3306a [label="93: model_post_init()" name="parser::Parser.model_post_init" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_39662934 [label="160: get_entities()" name="parser::Parser.get_entities" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_04d61fa0 [label="187: get_deps_code()" name="parser::Parser.get_deps_code" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_bd3db758 [label="132: get_classes()" name="parser::Parser.get_classes" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_46bd7e85 [label="462: _get_edge_nodes()" name="parser::Parser._get_edge_nodes" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_da74d3b1 [label="39: parse_methods()" name="parser::Class.parse_methods" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_55e369ad [label="261: parse_class_structure()" name="parser::Parser.parse_class_structure" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_343e9ae6 [label="332: _get_tree_recursively()" name="parser::Parser._get_tree_recursively" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_78fda419 [label="379: parse_module_deps()" name="parser::Parser.parse_module_deps" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_b5529be3 [label="439: _find_cross_edges()" name="parser::Parser._find_cross_edges" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_9f28598e [label="96: parse_modules()" name="parser::Parser.parse_modules" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_fb99833a [label="64: parse_entities()" name="parser::Module.parse_entities" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_e198b13a [label="376: get_module_names()" name="parser::Parser.get_module_names" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_d8cf52dc [label="217: _write_graphs()" name="parser::Parser._write_graphs" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_448fab1a [label="291: _get_paths_recursively()" name="parser::Parser._get_paths_recursively" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_f1011ef9 [label="361: get_import_names()" name="parser::Parser.get_import_names" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_cc1eac9e [label="108: get_modules()" name="parser::Parser.get_modules" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_d445e2ee [label="203: concat_dep_code()" name="parser::Parser.concat_dep_code" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_8bcc1983 [label="316: _match()" name="parser::Parser._match" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_d923ee4b [label="419: parse_files_flows()" name="parser::Parser.parse_files_flows" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_7c04280b [label="448: _add_parents_attr()" name="parser::Parser._add_parents_attr" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_0f9250cd [label="171: get_code_structure()" name="parser::Parser.get_code_structure" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_9303f9a8 [label="145: get_functions()" name="parser::Parser.get_functions" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_fb99833a -> node_da74d3b1 [color="#56B4E9" penwidth="2"];
node_6fb3306a -> node_9f28598e [color="#56B4E9" penwidth="2"];
node_9f28598e -> node_e1123935 [color="#D55E00" penwidth="2"];
node_9f28598e -> node_c69a4d0d [color="#D55E00" penwidth="2"];
node_c69a4d0d -> node_fb99833a [color="#0072B2" penwidth="2"];
node_499d168b -> node_cc1eac9e [color="#009E73" penwidth="2"];
node_499d168b -> node_cc1eac9e [color="#009E73" penwidth="2"];
node_bd3db758 -> node_cc1eac9e [color="#000000" penwidth="2"];
node_9303f9a8 -> node_cc1eac9e [color="#000000" penwidth="2"];
node_39662934 -> node_cc1eac9e [color="#F0E442" penwidth="2"];
node_0f9250cd -> node_f9f0388e [color="#0072B2" penwidth="2"];
node_0f9250cd -> node_55e369ad [color="#0072B2" penwidth="2"];
node_0f9250cd -> node_84e87eb0 [color="#0072B2" penwidth="2"];
node_04d61fa0 -> node_78fda419 [color="#000000" penwidth="2"];
node_04d61fa0 -> node_d8cf52dc [color="#000000" penwidth="2"];
node_04d61fa0 -> node_d445e2ee [color="#000000" penwidth="2"];
node_56465d25 -> node_d923ee4b [color="#0072B2" penwidth="2"];
node_56465d25 -> node_d8cf52dc [color="#0072B2" penwidth="2"];
node_f9f0388e -> node_84e87eb0 [color="#D55E00" penwidth="2"];
node_f9f0388e -> node_55e369ad [color="#D55E00" penwidth="2"];
node_e1123935 -> node_448fab1a [color="#0072B2" penwidth="2"];
node_448fab1a -> node_b6ccfbd6 [color="#56B4E9" penwidth="2"];
node_448fab1a -> node_448fab1a [color="#56B4E9" penwidth="2"];
node_b6ccfbd6 -> node_fe10930d [color="#D55E00" penwidth="2"];
node_b6ccfbd6 -> node_8bcc1983 [color="#D55E00" penwidth="2"];
node_bc28c28c -> node_343e9ae6 [color="#F0E442" penwidth="2"];
node_343e9ae6 -> node_b6ccfbd6 [color="#D55E00" penwidth="2"];
node_343e9ae6 -> node_8bcc1983 [color="#D55E00" penwidth="2"];
node_343e9ae6 -> node_343e9ae6 [color="#D55E00" penwidth="2"];
node_d6716af4 -> node_f1011ef9 [color="#F0E442" penwidth="2"];
node_d6716af4 -> node_e1123935 [color="#F0E442" penwidth="2"];
node_d6716af4 -> node_e198b13a [color="#F0E442" penwidth="2"];
node_d6716af4 -> node_cc1eac9e [color="#F0E442" penwidth="2"];
node_f1011ef9 -> node_499d168b [color="#E69F00" penwidth="2"];
node_78fda419 -> node_d923ee4b [color="#E69F00" penwidth="2"];
node_78fda419 -> node_a7969c5e [color="#E69F00" penwidth="2"];
node_a7969c5e -> node_b5529be3 [color="#D55E00" penwidth="2"];
node_a7969c5e -> node_46bd7e85 [color="#D55E00" penwidth="2"];
node_b5529be3 -> node_7c04280b [color="#009E73" penwidth="2"];
node_7c04280b -> node_d47f8482 [color="#009E73" penwidth="2"];
node_7c04280b -> node_d47f8482 [color="#009E73" penwidth="2"];
node_d47f8482 -> node_d47f8482 [color="#56B4E9" penwidth="2"];
subgraph cluster_4e392be8 {
    label="File: parser";
    name="parser";
    style="filled";
    graph[style=dotted];
    subgraph cluster_3294fdd5 {
        node_da74d3b1;
        label="Class: Class";
        name="Class";
        style="filled";
        graph[style=dotted];
    };
    subgraph cluster_4e1118ae {
        node_fb99833a;
        label="Class: Module";
        name="Module";
        style="filled";
        graph[style=dotted];
    };
    subgraph cluster_9b123b73 {
        node_6fb3306a node_9f28598e node_c69a4d0d node_cc1eac9e node_499d168b node_bd3db758 node_9303f9a8 node_39662934 node_0f9250cd node_04d61fa0 node_d445e2ee node_56465d25 node_d8cf52dc node_84e87eb0 node_55e369ad node_f9f0388e node_e1123935 node_448fab1a node_b6ccfbd6 node_fe10930d node_8bcc1983 node_bc28c28c node_343e9ae6 node_d6716af4 node_f1011ef9 node_e198b13a node_78fda419 node_d923ee4b node_a7969c5e node_b5529be3 node_7c04280b node_d47f8482 node_46bd7e85;
        label="Class: Parser";
        name="Parser";
        style="filled";
        graph[style=dotted];
    };
};
}
